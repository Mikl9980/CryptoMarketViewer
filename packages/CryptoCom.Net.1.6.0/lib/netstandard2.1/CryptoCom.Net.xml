<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryptoCom.Net</name>
    </assembly>
    <members>
        <member name="T:CryptoCom.Net.Clients.CryptoComRestClient">
            <inheritdoc cref="T:CryptoCom.Net.Interfaces.Clients.ICryptoComRestClient" />
        </member>
        <member name="P:CryptoCom.Net.Clients.CryptoComRestClient.ExchangeApi">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComRestClient.#ctor(System.Action{CryptoCom.Net.Objects.Options.CryptoComRestOptions})">
            <summary>
            Create a new instance of the CryptoComRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{CryptoCom.Net.Objects.Options.CryptoComRestOptions})">
            <summary>
            Create a new instance of the CryptoComRestClient using provided options
            </summary>
            <param name="options">Option configuration</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComRestClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComRestClient.SetDefaultOptions(System.Action{CryptoCom.Net.Objects.Options.CryptoComRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.CryptoComSocketClient">
            <inheritdoc cref="T:CryptoCom.Net.Interfaces.Clients.ICryptoComSocketClient" />
        </member>
        <member name="P:CryptoCom.Net.Clients.CryptoComSocketClient.ExchangeApi">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComSocketClient.#ctor(System.Action{CryptoCom.Net.Objects.Options.CryptoComSocketOptions})">
            <summary>
            Create a new instance of CryptoComSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComSocketClient.#ctor(Microsoft.Extensions.Options.IOptions{CryptoCom.Net.Objects.Options.CryptoComSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of CryptoComSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="options">Option configuration</param>
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComSocketClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComSocketClient.SetDefaultOptions(System.Action{CryptoCom.Net.Objects.Options.CryptoComSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CryptoCom.Net.Clients.CryptoComSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi">
            <inheritdoc cref="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi" />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.Account">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.Staking">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApi.SharedClient">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetBalanceHistoryAsync(CryptoCom.Net.Enums.Timeframe,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetAccountInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.SetAccountLeverageAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.SetAccountSettingsAsync(System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionScope},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionMode},System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetAccountSettingsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetTransactionHistoryAsync(System.String,System.Nullable{CryptoCom.Net.Enums.TransactionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetFeeRatesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetSymbolFeeRateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetAssetsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetDepositAddressesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{CryptoCom.Net.Enums.DepositStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{CryptoCom.Net.Enums.WithdrawalStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetRiskParametersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetKlinesAsync(System.String,CryptoCom.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetValuationsAsync(System.String,CryptoCom.Net.Enums.ValuationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetExpiredSettlementPriceAsync(CryptoCom.Net.Enums.SymbolType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiExchangeData.GetInsuranceAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.StakeAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.UnstakeAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetStakingPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetStakingSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetOpenStakingRequestsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetStakingHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetStakingRewardHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.ConvertAsync(System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetOpenConvertRequestsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiStaking.GetConvertRateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.PlaceOrderAsync(System.String,CryptoCom.Net.Enums.OrderSide,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{CryptoCom.Net.Enums.PriceType},System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionScope},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionMode},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{CryptoCom.Net.Enums.OrderTypeFilter},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.ClosePositionAsync(System.String,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.CancelOrdersAsync(System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComCancelOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.PlaceOcoOrderAsync(CryptoCom.Net.Objects.Models.CryptoComOrderRequest,CryptoCom.Net.Objects.Models.CryptoComOrderRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.CancelOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComRestClientExchangeApiTrading.GetOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi">
            <summary>
            Client providing access to the CryptoCom Exchange websocket Api
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.#ctor(Microsoft.Extensions.Logging.ILogger,CryptoCom.Net.Objects.Options.CryptoComSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComTicker}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComTicker}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToKlineUpdatesAsync(System.String,CryptoCom.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComKline}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},CryptoCom.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComKline}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToMarkPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToSettlementUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToSettlementUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToSettlementUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToFundingRateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToFundingRateUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToEstimatedFundingRateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToEstimatedFundingRateUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrder}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrder}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrder}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToUserTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComUserTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToUserTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComUserTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComUserTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComBalances}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComPosition}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SubscribeToPositionBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComBalancePositionUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.PlaceOrderAsync(System.String,CryptoCom.Net.Enums.OrderSide,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{CryptoCom.Net.Enums.PriceType},System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionScope},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionMode},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.CancelAllOrdersAsync(System.String,System.Nullable{CryptoCom.Net.Enums.OrderTypeFilter},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.ClosePositionAsync(System.String,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.SharedClient">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Clients.ExchangeApi.CryptoComSocketClientExchangeApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.CryptoComEnvironment">
            <summary>
            CryptoCom environments
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComEnvironment.RestClientAddress">
            <summary>
            Rest API address
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComEnvironment.SocketClientAddress">
            <summary>
            Socket API address
            </summary>
        </member>
        <member name="M:CryptoCom.Net.CryptoComEnvironment.#ctor">
            <summary>
            ctor for DI, use <see cref="M:CryptoCom.Net.CryptoComEnvironment.CreateCustom(System.String,System.String,System.String)"/> for creating a custom environment
            </summary>
        </member>
        <member name="M:CryptoCom.Net.CryptoComEnvironment.GetEnvironmentByName(System.String)">
            <summary>
            Get the CryptoCom environment by name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComEnvironment.Live">
            <summary>
            Live environment
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComEnvironment.Sandbox">
            <summary>
            Sandbox environment
            </summary>
        </member>
        <member name="M:CryptoCom.Net.CryptoComEnvironment.CreateCustom(System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="spotRestAddress"></param>
            <param name="spotSocketStreamsAddress"></param>
            <returns></returns>
        </member>
        <member name="T:CryptoCom.Net.CryptoComExchange">
            <summary>
            CryptoCom exchange information and configuration
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.ExchangeName">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.DisplayName">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.ImageUrl">
            <summary>
            Url to exchange image
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.Url">
            <summary>
            Url to the main website
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.ApiDocsUrl">
            <summary>
            Urls to the API documentation
            </summary>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.Type">
            <summary>
            Type of exchange
            </summary>
        </member>
        <member name="M:CryptoCom.Net.CryptoComExchange.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <summary>
            Format a base and quote asset to a Crypto.com recognized symbol 
            </summary>
            <param name="baseAsset">Base asset</param>
            <param name="quoteAsset">Quote asset</param>
            <param name="tradingMode">Trading mode</param>
            <param name="deliverTime">Delivery time for delivery futures</param>
            <returns></returns>
        </member>
        <member name="P:CryptoCom.Net.CryptoComExchange.RateLimiter">
            <summary>
            Rate limiter configuration for the CryptoCom API
            </summary>
        </member>
        <member name="T:CryptoCom.Net.CryptoComRateLimiters">
            <summary>
            Rate limiter configuration for the CryptoCom API
            </summary>
        </member>
        <member name="E:CryptoCom.Net.CryptoComRateLimiters.RateLimitTriggered">
            <summary>
            Event for when a rate limit is triggered
            </summary>
        </member>
        <member name="T:CryptoCom.Net.CryptoComTrackerFactory">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.CryptoComTrackerFactory.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:CryptoCom.Net.CryptoComTrackerFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:CryptoCom.Net.CryptoComTrackerFactory.CreateKlineTracker(CryptoExchange.Net.SharedApis.SharedSymbol,CryptoExchange.Net.SharedApis.SharedKlineInterval,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.CryptoComTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Enums.AccessType">
            <summary>
            Access type
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.AccessType.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.AccessType.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.DepositStatus">
            <summary>
            Deposit status
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.DepositStatus.NotArrived">
            <summary>
            Not arrived
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.DepositStatus.Arrived">
            <summary>
            Arrived
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.DepositStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.DepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.KlineInterval">
            <summary>
            Interval for klines/candlesticks
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            Twelve hours
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.TwoWeeks">
            <summary>
            Two weeks
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.KlineInterval.OneMonth">
            <summary>
            One month
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderSide.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.OrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.Filled">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderStatus.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderType.Limit">
            <summary>
            Limit
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderType.Market">
            <summary>
            Market
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderType.StopLoss">
            <summary>
            Stop loss
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderType.StopLimit">
            <summary>
            Stop limit
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderType.TakeProfit">
            <summary>
            Take profit
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderType.TakeProfitLimit">
            <summary>
            Take profit limit
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.OrderTypeFilter">
            <summary>
            Order type filter
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderTypeFilter.Limit">
            <summary>
            Limit orders
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderTypeFilter.Trigger">
            <summary>
            Trigger orders
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.OrderTypeFilter.All">
            <summary>
            All types
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.PriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.PriceType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.PriceType.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.PriceType.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.PriceType.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.SelfTradePreventionMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SelfTradePreventionMode.CancelMaker">
            <summary>
            Cancel maker
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SelfTradePreventionMode.CancelTaker">
            <summary>
            Cancel taker
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SelfTradePreventionMode.CancelBoth">
            <summary>
            Cancel both maker and taker
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.SelfTradePreventionScope">
            <summary>
            STP scope
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SelfTradePreventionScope.MasterAndSubAccount">
            <summary>
            Matches master or sub a/c
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SelfTradePreventionScope.SubAccount">
            <summary>
            Matches sub a/c only
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SelfTradePreventionScope.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.StakeRequestStatus">
            <summary>
            Staking request status
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.PendingWithdrawal">
            <summary>
            Pending withdrawal
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.PendingUnstaking">
            <summary>
            Pending unstaking
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.Staked">
            <summary>
            Staked
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeRequestStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.StakeSide">
            <summary>
            Staking request side
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeSide.Stake">
            <summary>
            Stake
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeSide.Unstake">
            <summary>
            Unstake
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.StakeStatus">
            <summary>
            Staking status
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeStatus.Staked">
            <summary>
            Staked
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.StakeStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.SymbolType">
            <summary>
            Symbol type
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SymbolType.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SymbolType.PerpetualSwap">
            <summary>
            Perpetual swap
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SymbolType.DeliveryFuture">
            <summary>
            Future
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.SymbolType.CroStake">
            <summary>
            CRO stake
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.Timeframe">
            <summary>
            Timeframe
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.Timeframe.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.Timeframe.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TimeInForce.GoodTillCancel">
            <summary>
            Good till cancel
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            Immediate or cancel
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            Fill or kill
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.TradeRole">
            <summary>
            Trade role
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TradeRole.Maker">
            <summary>
            Maker
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TradeRole.Taker">
            <summary>
            Taker
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.TransactionType">
            <summary>
            Type of transaction
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.Trading">
            <summary>
            Trading
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.TradeFee">
            <summary>
            Trade fee
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.WithdrawFee">
            <summary>
            Withdraw fee
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.Withdraw">
            <summary>
            Withdraw
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.RollbackDeposit">
            <summary>
            Rollback deposit
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.RollbackWithdraw">
            <summary>
            Rollback withdraw
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.Funding">
            <summary>
            Funding
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.RealizedPnl">
            <summary>
            Realized pnl
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.InsuranceFund">
            <summary>
            Insurance fund
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.SocializedLoss">
            <summary>
            Socialized loss
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.LiquidationFee">
            <summary>
            Liquidation fee
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.SessionReset">
            <summary>
            Session reset
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.Adjustment">
            <summary>
            Adjustment
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.SessionSettle">
            <summary>
            Session settle
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.UncoveredLoss">
            <summary>
            Uncovered loss
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.AdminAdjustment">
            <summary>
            Admin adjustment
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.Delist">
            <summary>
            Delist
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.SettlementFee">
            <summary>
            Settlement fee
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.AutoConversion">
            <summary>
            Auto conversion
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.ManualConversion">
            <summary>
            Manual conversion
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.SubaccountTx">
            <summary>
            Subaccount transaction
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.TransactionType.FiatWithdrawalCancel">
            <summary>
            Fiat withdrawal cancel
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.UnstakeStatus">
            <summary>
            Unstake status
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.UnstakeStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.UnstakeStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.UnstakeStatus.PendingWithdrawal">
            <summary>
            Pending withdrawal
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.UnstakeStatus.PendingUnstaking">
            <summary>
            Pending unstaking
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.UnstakeStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.UnstakeStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.ValuationType">
            <summary>
            Valuation type
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.ValuationType.IndexPrice">
            <summary>
            Per minute data of underlying reference price of the instrument.
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.ValuationType.MarkPrice">
            <summary>
            Per minute data of mark price of the instrument.
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.ValuationType.FundingHistory">
            <summary>
            Hourly data of the funding rate settled in past hourly settlement.
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.ValuationType.FundingRate">
            <summary>
            Per minute data of current hourly funding rate that will settle at the end of each hour of current 4-hour interval.
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.ValuationType.EstimatedFundingRate">
            <summary>
            Per minute data of estimated funding rate for the next interval.
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Enums.WithdrawalStatus">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.PaymentInProgress">
            <summary>
            Payment in-progress
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.PaymentFailed">
            <summary>
            Payment failed
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Enums.WithdrawalStatus.Canceled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:CryptoCom.Net.ExtensionMethods.CryptoComExtensionMethods">
            <summary>
            Extension methods specific to using the CryptoCom API
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi">
            <summary>
            CryptoCom Exchange API endpoints
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi.Staking">
            <summary>
            Endpoints related to staking
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount">
            <summary>
            CryptoCom Exchange account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get user account balances
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-user-balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetBalanceHistoryAsync(CryptoCom.Net.Enums.Timeframe,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get account cash balance history 
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-user-balance-history" /></para>
            </summary>
            <param name="interval">Interval of the data, either OneHour or OneDay</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetAccountInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get master and sub account info
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-accounts" /></para>
            </summary>
            <param name="page">Page</param>
            <param name="pageSize">Max number of results per page</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.SetAccountLeverageAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Set account leverage. Not that each symbol has it's own max leverage, the lower of the two will be used
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-change-account-leverage" /></para>
            </summary>
            <param name="accountId">Id of the current account</param>
            <param name="leverage">New leverage setting</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.SetAccountSettingsAsync(System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionScope},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionMode},System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Update account settings
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-change-account-settings" /></para>
            </summary>
            <param name="stpScope">Self trade prevention scope</param>
            <param name="stpMode">Self trade prevention mode</param>
            <param name="stpId">Self trade prevention id</param>
            <param name="leverage">Leverage</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetAccountSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get current account settings
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-account-settings" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetTransactionHistoryAsync(System.String,System.Nullable{CryptoCom.Net.Enums.TransactionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get account transaction history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-transactions" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="transactionType">Filter by transaction type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetFeeRatesAsync(System.Threading.CancellationToken)">
            <summary>
            Get user fee rates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-fee-rate" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetSymbolFeeRateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get symbol fee rates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-instrument-fee-rate" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-withdrawal" /></para>
            </summary>
            <param name="asset">Asset to withdraw</param>
            <param name="quantity">Quantity</param>
            <param name="address">Target address</param>
            <param name="addressTag">Address tag</param>
            <param name="network">Network to use</param>
            <param name="clientWithdrawId">Client id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get asset network info
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-currency-networks" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetDepositAddressesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get deposit addresses for an asset
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-deposit-address" /></para>
            </summary>
            <param name="asset">Asset name</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{CryptoCom.Net.Enums.DepositStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-deposit-history" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="status">Filter by status</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{CryptoCom.Net.Enums.WithdrawalStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-withdrawal-history" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="status">Filter by status</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData">
            <summary>
            CryptoCom Exchange exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="XXX" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetRiskParametersAsync(System.Threading.CancellationToken)">
            <summary>
            Get risk parameters
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-risk-parameters" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get symbols/instruments
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-instruments" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetOrderBookAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the order book for a symbol
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-book" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="depth">Order book depth, max 50</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get tickers
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-tickers" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trade history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-trades" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results, max 150</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetKlinesAsync(System.String,CryptoCom.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Kline/Candlestick data
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-candlestick" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetValuationsAsync(System.String,CryptoCom.Net.Enums.ValuationType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get various statistics
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-valuations" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="type">Stat type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetExpiredSettlementPriceAsync(CryptoCom.Net.Enums.SymbolType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get expired contracts settlement price
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-expired-settlement-price" /></para>
            </summary>
            <param name="symbolType">Symbol type</param>
            <param name="pageNumber">Page number</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiExchangeData.GetInsuranceAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the balance of Insurance Fund for a particular asset.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-get-insurance" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiShared">
            <summary>
            Shared interface for Exchange rest API usage
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking">
            <summary>
            CryptoCom Exchange staking endpoints
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.StakeAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Create a new stake request
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-stake" /></para>
            </summary>
            <param name="symbol">The symbol, for example SOL.staked</param>
            <param name="quantity">Quantity to stake</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.UnstakeAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Create a new unstake request
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-unstake" /></para>
            </summary>
            <param name="symbol">The symbol, for example `SOL.staked`</param>
            <param name="quantity">Quantity to unstake</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetStakingPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current staking positions
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-get-staking-position" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `SOL.staked`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetStakingSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get staking symbols
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-get-staking-instruments" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetOpenStakingRequestsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get open stake/unstake requests
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-get-open-stake" /></para>
            </summary>
            <param name="symbol">Filter by staking symbol, for example `SOL.staked`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetStakingHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get staking request history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-get-stake-history" /></para>
            </summary>
            <param name="symbol">Filter by staking symbol</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetStakingRewardHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get staking reward history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-get-reward-history" /></para>
            </summary>
            <param name="symbol">Filter by staking symbol, for example 'SOL.staked'</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.ConvertAsync(System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Create a new convert request
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-convert" /></para>
            </summary>
            <param name="fromSymbol">Symbol to convert from, for example `ETH.staked` or `CDCETH`</param>
            <param name="toSymbol">Symbol to convert to, for example `ETH.staked` or `CDCETH`</param>
            <param name="expectedRate">Expected conversion rate</param>
            <param name="quantity">Quantity to convert</param>
            <param name="slippageToleranceBps">Maximum slippage allowed in basis point</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetOpenConvertRequestsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get open convert requests
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-staking-get-open-convert" /></para>
            </summary>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiStaking.GetConvertRateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get conversion rate
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#public-staking-get-conversion-rate" /></para>
            </summary>
            <param name="symbol">Symbol name, for example 'CDCETH'</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading">
            <summary>
            CryptoCom Exchange trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get positions for the account
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-positions" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSD_PERP`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.PlaceOrderAsync(System.String,CryptoCom.Net.Enums.OrderSide,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{CryptoCom.Net.Enums.PriceType},System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionScope},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionMode},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#introduction-2" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Order quantity</param>
            <param name="quoteQuantity">Quantity in quote asset</param>
            <param name="price">Limit price</param>
            <param name="clientOrderId">Client order id</param>
            <param name="postOnly">Post only order</param>
            <param name="timeInForce">Time in force</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="triggerPriceType">Type of trigger price</param>
            <param name="margin">True for spot margin order</param>
            <param name="selfTradePreventionScope">Scope for self trade prevention</param>
            <param name="selfTradePreventionMode">Mode for self trade prevention</param>
            <param name="selfTradePreventionId">Id for self trade prevention</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an order by id
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order" /></para>
            </summary>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{CryptoCom.Net.Enums.OrderTypeFilter},System.Threading.CancellationToken)">
            <summary>
            Cancel all order fitting the parameters
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-all-orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="type">Filter by type</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.ClosePositionAsync(System.String,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Close an open position
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-close-position" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSD_PERP`</param>
            <param name="orderType">Type of order to use</param>
            <param name="price">Price for limit order</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get user open orders
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-open-orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get info on a specific order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-order-detail" /></para>
            </summary>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get closed order history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-order-history" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-trades" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in a single call. Note that this call will return success even when all or some of the requests fail. Make sure to check the result data.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-order-list-list" /></para>
            </summary>
            <param name="orders">Orders to place, max 10</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.CancelOrdersAsync(System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComCancelOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders in a single call. Note that this call will return success even when all or some of the requests fail. Make sure to check the result data.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order-list-list" /></para>
            </summary>
            <param name="orders">Orders to cancel</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.PlaceOcoOrderAsync(CryptoCom.Net.Objects.Models.CryptoComOrderRequest,CryptoCom.Net.Objects.Models.CryptoComOrderRequest,System.Threading.CancellationToken)">
            <summary>
            Place a new OCO (One Cancels Other) order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-order-list-oco" /></para>
            </summary>
            <param name="order1">First order</param>
            <param name="order2">Second order</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.CancelOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an OCO order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order-list-oco" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="listId">List id to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComRestClientExchangeApiTrading.GetOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get info on an OCO order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-order-list-oco" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="listId">Id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi">
            <summary>
            CryptoCom Exchange streams
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book snapshot updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#book-instrument_name-depth" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="depth">The book depth, either 10 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book snapshot updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#book-instrument_name-depth" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="depth">The book depth, either 10 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook delta updates. Initially the orderbook snapshot is pushed, after which only changes are pushed.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#book-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="depth">The book depth, either 10 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook delta updates. Initially the orderbook snapshot is pushed, after which only changes are pushed.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#book-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="depth">The book depth, either 10 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToKlineUpdatesAsync(System.String,CryptoCom.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComKline}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#candlestick-time_frame-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the kline/candles</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},CryptoCom.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComKline}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#candlestick-time_frame-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the kline/candles</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComTicker}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#ticker-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComTicker}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#ticker-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#trade-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#trade-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToIndexPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#index-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to index price updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#index-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToMarkPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to mark price updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#mark-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to mark price updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#mark-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToSettlementUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to settlement prices
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#settlement-instrument_name" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToSettlementUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to settlement prices
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#settlement-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToSettlementUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to settlement prices
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#settlement-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToFundingRateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to funding rate updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#funding-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToFundingRateUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to funding rate updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#funding-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToEstimatedFundingRateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to estimated funding rate updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#estimatedfunding-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToEstimatedFundingRateUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComValuation}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to estimated funding rate updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#estimatedfunding-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrder}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-order-instrument_name" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrder}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-order-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToOrderUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrder}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-order-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComUserTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-trade-instrument_name" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToUserTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComUserTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-trade-instrument_name" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToUserTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComUserTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-trade-instrument_name" /></para>
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComBalances}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-balance" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComPosition}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-positions" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SubscribeToPositionBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Models.CryptoComBalancePositionUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position and balance updates
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-position_balance" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get user account balances
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-user-balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get positions for the account
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-positions" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSD_PERP`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.PlaceOrderAsync(System.String,CryptoCom.Net.Enums.OrderSide,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{CryptoCom.Net.Enums.PriceType},System.Nullable{System.Boolean},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionScope},System.Nullable{CryptoCom.Net.Enums.SelfTradePreventionMode},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#introduction-2" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Order quantity</param>
            <param name="quoteQuantity">Quantity in quote asset</param>
            <param name="price">Limit price</param>
            <param name="clientOrderId">Client order id</param>
            <param name="postOnly">Post only order</param>
            <param name="timeInForce">Time in force</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="triggerPriceType">Type of trigger price</param>
            <param name="margin">True for spot margin order</param>
            <param name="selfTradePreventionScope">Scope for self trade prevention</param>
            <param name="selfTradePreventionMode">Mode for self trade prevention</param>
            <param name="selfTradePreventionId">Id for self trade prevention</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an order by id
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order" /></para>
            </summary>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.CancelAllOrdersAsync(System.String,System.Nullable{CryptoCom.Net.Enums.OrderTypeFilter},System.Threading.CancellationToken)">
            <summary>
            Cancel all order fitting the parameters
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-all-orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="type">Filter by type</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.ClosePositionAsync(System.String,CryptoCom.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Close an open position
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-close-position" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSD_PERP`</param>
            <param name="orderType">Type of order to use</param>
            <param name="price">Price for limit order</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get user open orders
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-open-orders" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.PlaceMultipleOrdersAsync(System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in a single call. Note that this call will return success even when all or some of the requests fail. Make sure to check the result data.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-order-list-list" /></para>
            </summary>
            <param name="orders">Orders to place, max 10</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.CancelOrdersAsync(System.Collections.Generic.IEnumerable{CryptoCom.Net.Objects.Models.CryptoComCancelOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders in a single call. Note that this call will return success even when all or some of the requests fail. Make sure to check the result data.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order-list-list" /></para>
            </summary>
            <param name="orders">Orders to cancel</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.PlaceOcoOrderAsync(CryptoCom.Net.Objects.Models.CryptoComOrderRequest,CryptoCom.Net.Objects.Models.CryptoComOrderRequest,System.Threading.CancellationToken)">
            <summary>
            Place a new OCO (One Cancels Other) order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-order-list-oco" /></para>
            </summary>
            <param name="order1">First order</param>
            <param name="order2">Second order</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.CancelOcoOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an OCO order
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order-list-oco" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="listId">List id to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-withdrawal" /></para>
            </summary>
            <param name="asset">Asset to withdraw</param>
            <param name="quantity">Quantity</param>
            <param name="address">Target address</param>
            <param name="addressTag">Address tag</param>
            <param name="network">Network to use</param>
            <param name="clientWithdrawId">Client id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SetCancelOnDisconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Set all open orders created by this connection to cancel when the connection is interupted. There is no way to cancel this once set, unsubscribing is considered a loss of connection.
            <para><a href="https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-set-cancel-on-disconnect" /></para>
            </summary>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApi.SharedClient">
            <summary>
            Get the shared socket requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ExchangeApi.ICryptoComSocketClientExchangeApiShared">
            <summary>
            Shared interface for TP_RP_API_NAME socket API usage
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ICryptoComRestClient">
            <summary>
            Client for accessing the CryptoCom Rest API. 
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ICryptoComRestClient.ExchangeApi">
            <summary>
            Exchange API endpoints
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ICryptoComRestClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <summary>
            Update specific options
            </summary>
            <param name="options">Options to update. Only specific options are changable after the client has been created</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ICryptoComRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.Clients.ICryptoComSocketClient">
            <summary>
            Client for accessing the CryptoCom websocket API
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.Clients.ICryptoComSocketClient.ExchangeApi">
            <summary>
            Exchange API endpoints
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ICryptoComSocketClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <summary>
            Update specific options
            </summary>
            <param name="options">Options to update. Only specific options are changable after the client has been created</param>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.Clients.ICryptoComSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.ICryptoComOrderBookFactory">
            <summary>
            CryptoCom local order book factory
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Interfaces.ICryptoComOrderBookFactory.Exchange">
            <summary>
            Exchange order book factory methods
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.ICryptoComOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Book options</param>
            <returns></returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.ICryptoComOrderBookFactory.Create(System.String,System.Action{CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions})">
            <summary>
            Create a new local order book instance
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Interfaces.ICryptoComTrackerFactory">
            <summary>
            Tracker factory
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.ICryptoComTrackerFactory.CreateKlineTracker(CryptoExchange.Net.SharedApis.SharedSymbol,CryptoExchange.Net.SharedApis.SharedKlineInterval,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new kline tracker
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Kline interval</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="M:CryptoCom.Net.Interfaces.ICryptoComTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new trade tracker for a symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="T:CryptoCom.Net.Objects.CryptoComApiAddresses">
            <summary>
            Api addresses
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.CryptoComApiAddresses.RestClientAddress">
            <summary>
            The address used by the CryptoComRestClient for the API
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.CryptoComApiAddresses.SocketClientAddress">
            <summary>
            The address used by the CryptoComSocketClient for the websocket API
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Objects.CryptoComApiAddresses.Default">
            <summary>
            The default addresses to connect to the CryptoCom API
            </summary>
        </member>
        <member name="F:CryptoCom.Net.Objects.CryptoComApiAddresses.Sandbox">
            <summary>
            The default addresses to connect to the CryptoCom Sandbox API
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.CryptoComOrderId">
            <summary>
            Order ids
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.CryptoComOrderId.ClientOid">
            <summary>
            Client oid
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.CryptoComOrderId.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComAccountInfo">
            <summary>
            Account info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountInfo.MasterAccount">
            <summary>
            Master account
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountInfo.SubAccountList">
            <summary>
            Sub account list
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComAccountDetails">
            <summary>
            Account details
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Uuid">
            <summary>
            Unique id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.MasterAccountUuid">
            <summary>
            Master account uuid
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.UserUuid">
            <summary>
            User uuid
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.MarginAccountUuid">
            <summary>
            Margin account uuid
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Tradable">
            <summary>
            Tradable
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.MobileNumber">
            <summary>
            Mobile number
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.CountryCode">
            <summary>
            Country code
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.MarginAccess">
            <summary>
            Margin access
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.DerivativesAccess">
            <summary>
            Derivatives access
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.TwoFaEnabled">
            <summary>
            Two fa enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.KycLevel">
            <summary>
            Kyc level
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Suspended">
            <summary>
            Suspended
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Terminated">
            <summary>
            Terminated
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.SpotEnabled">
            <summary>
            Spot enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.MarginEnabled">
            <summary>
            Margin enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.DerivativesEnabled">
            <summary>
            Derivatives enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountDetails.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComAccountSettings">
            <summary>
            Account settings
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountSettings.Leverage">
            <summary>
            Account leverage
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountSettings.StpId">
            <summary>
            Self trade prevention id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountSettings.StpScope">
            <summary>
            Self trade prevention scope
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAccountSettings.StpMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetWrapper.AssetMap">
            <summary>
            Asset map
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComAsset">
            <summary>
            Asset network info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAsset.FullName">
            <summary>
            Full name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAsset.DefaultNetwork">
            <summary>
            Default network
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAsset.Networks">
            <summary>
            Network list
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork">
            <summary>
            Network info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork.NetworkId">
            <summary>
            Network id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork.WithdrawalFee">
            <summary>
            Withdrawal fee
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork.WithdrawEnabled">
            <summary>
            Withdraw enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork.MinWithdrawalQuantity">
            <summary>
            Min withdrawal quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork.DepositEnabled">
            <summary>
            Deposit enabled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComAssetNetwork.ConfirmationRequired">
            <summary>
            Confirmation required
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComBalanceHistory">
            <summary>
            Balance history info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceHistory.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceHistory.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComBalanceHistoryValue">
            <summary>
            History value
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceHistoryValue.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceHistoryValue.Balance">
            <summary>
            Balance
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComBalancePositionUpdate">
            <summary>
            Balance and position update
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalancePositionUpdate.Balances">
            <summary>
            Balances
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalancePositionUpdate.Positions">
            <summary>
            Positions
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComBalanceUpdate">
            <summary>
            Balanace update
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceUpdate.Quantity">
            <summary>
            Balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalanceUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalancesWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComBalances">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalAvailableBalance">
            <summary>
            Total available balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalPositionIm">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalHaircut">
            <summary>
            Total haircut
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalPositionCost">
            <summary>
            Total position cost
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalCashBalance">
            <summary>
            Total cash balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalCollateralValue">
            <summary>
            Total collateral value
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalSessionUnrealizedPnl">
            <summary>
            Total session unrealized pnl
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.AssetName">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalSessionRealizedPnl">
            <summary>
            Total session realized pnl
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.IsLiquidating">
            <summary>
            Is liquidating
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.TotalEffectiveLeverage">
            <summary>
            Total effective leverage
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.PositionLimit">
            <summary>
            Position limit
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.UsedPositionLimit">
            <summary>
            Used position limit
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalances.PositionBalances">
            <summary>
            Position balances
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComBalance">
            <summary>
            Asset balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.MarketValue">
            <summary>
            Market value
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.CollateralEligible">
            <summary>
            Collateral eligible
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.Haircut">
            <summary>
            Haircut
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.CollateralQuantity">
            <summary>
            Collateral quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.MaxWithdrawalBalance">
            <summary>
            Max withdrawal balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComBalance.ReservedQuantity">
            <summary>
            Reserved quantity
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComCancelOrderRequest">
            <summary>
            Order cancellation request
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComCancelOrderRequest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComCancelOrderRequest.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComCancelOrderResult">
            <summary>
            Cancel order result
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComCancelOrderResult.Index">
            <summary>
            Order index in request
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComCancelOrderResult.Code">
            <summary>
            Result code
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComCancelOrderResult.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComConversionRate">
            <summary>
            Conversion rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConversionRate.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConversionRate.ConversionRate">
            <summary>
            Conversion rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequestWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComConvertRequest">
            <summary>
            Convert request info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.FromSymbol">
            <summary>
            From symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.ToSymbol">
            <summary>
            To symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.ExpectedRate">
            <summary>
            Expected rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.FromQuantity">
            <summary>
            From quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.SlippageToleranceBps">
            <summary>
            Slippage tolerance bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.ActualRate">
            <summary>
            Actual rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.ToQuantity">
            <summary>
            To quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.ConvertId">
            <summary>
            Convert id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertRequest.CreateTime">
            <summary>
            Create timestamp
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComConvertResult">
            <summary>
            Convert request response
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.FromSymbol">
            <summary>
            From symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.ToSymbol">
            <summary>
            To symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.ExpectedRate">
            <summary>
            Expected rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.FromQuantity">
            <summary>
            From quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.SlippageToleranceBps">
            <summary>
            Slippage tolerance bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.ConvertId">
            <summary>
            Convert id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComConvertResult.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositWrapper.DepositList">
            <summary>
            Deposit list
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComDeposit">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDeposit.DepositStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddressWrapper.DepositAddressList">
            <summary>
            Deposit address list
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComDepositAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddress.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddress.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddress.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddress.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComDepositAddress.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComExpiredPriceWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComExpiredPrice">
            <summary>
            Price info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComExpiredPrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComExpiredPrice.ExpireTime">
            <summary>
            Expire timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComExpiredPrice.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComExpiredPrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKlineWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComKline">
            <summary>
            Kline/candlestick data
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComKline.OpenTime">
            <summary>
            Open timestamp
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOcoResult">
            <summary>
            OCO order result
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOcoResult.ListId">
            <summary>
            Order list id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.OrderSide">
            <summary>
            OrderSide
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.Price">
            <summary>
            Limit price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.OrderValue">
            <summary>
            Order value
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.MakerFeeRate">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.TakerFeeRate">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.AveragePrice">
            <summary>
            Average fill price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.QuantityFilled">
            <summary>
            Cumulative quantity filled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.QuoteQuantityFilled">
            <summary>
            Cumulative value filled
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.Fee">
            <summary>
            Cumulative fee
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.UpdateUserId">
            <summary>
            Update user id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.OrderDate">
            <summary>
            Order date
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.ListId">
            <summary>
            Order list id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.ContingencyType">
            <summary>
            Contingency type
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrder.TriggerPriceType">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOrderBook">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBook.Asks">
            <summary>
            Asks
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBook.Bids">
            <summary>
            Bids
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate.MessageTime">
            <summary>
            Time of the event
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate.UpdateTime">
            <summary>
            Book update time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate.SequenceNumber">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookUpdate.PreviousSequenceNumber">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookEntry.Price">
            <summary>
            Price level
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookEntry.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderBookEntry.OrderCount">
            <summary>
            Number of orders
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOrderRequest">
            <summary>
            Order request
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.PostOnly">
            <summary>
            Post only
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.QuoteQuantity">
            <summary>
            Quote quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.Price">
            <summary>
            Limit price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.StpId">
            <summary>
            Self trade prevention id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.StpMode">
            <summary>
            Self trade prevention mode
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.StpScope">
            <summary>
            Self trade prevention scope
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderRequest.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComOrderResult">
            <summary>
            Order result
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderResult.Index">
            <summary>
            Order index in request
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderResult.Code">
            <summary>
            Result code
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComOrderResult.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPositionWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComPosition">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.Quantity">
            <summary>
            Position size
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.Cost">
            <summary>
            Cost
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.OpenPositionPnl">
            <summary>
            Open position profit and loss
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.OpenPosCost">
            <summary>
            Open pos cost
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.SessionPnl">
            <summary>
            Session profit and loss
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.UpdateTime">
            <summary>
            Update timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComPosition.SymbolType">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComRiskParameters">
            <summary>
            Limit info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.DefaultMaxProductLeverageForSpot">
            <summary>
            Default max product leverage for spot
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.DefaultMaxProductLeverageForPerps">
            <summary>
            Default max product leverage for perps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.DefaultMaxProductLeverageForFutures">
            <summary>
            Default max product leverage for futures
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.DefaultUnitMarginRate">
            <summary>
            Default unit margin rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.DefaultCollateralCap">
            <summary>
            Default collateral cap
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.UpdateTime">
            <summary>
            Update timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParameters.BaseAssetConfig">
            <summary>
            Base asset config
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.CollateralCapNotional">
            <summary>
            the maximum $notional that is counted towards the margin balance. Any additional token balance would not contribute to the margin balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.MaxProductLeverageForSpot">
            <summary>
            Max product leverage for spot
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.MaxProductLeverageForPerps">
            <summary>
            Max product leverage for perps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.MaxProductLeverageForFutures">
            <summary>
            Max product leverage for futures
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.MinimumHaircut">
            <summary>
            Minimum haircut
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.UnitMarginRate">
            <summary>
            Unit margin rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.MaxShortSellLimit">
            <summary>
            Max negative asset balance user can hold on the base token
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.DailyNotionalLimit">
            <summary>
            Max spot order notional user can place in rolling 24-hour window. If field is omitted, user can trade unlimited on this base token
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComRiskParametersAsset.OrderLimit">
            <summary>
            Max value per order in USD
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePositionWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComStakePosition">
            <summary>
            Staking position info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePosition.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePosition.UnderlyingAsset">
            <summary>
            Underlying asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePosition.StakedQuantity">
            <summary>
            Staked quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePosition.PendingStakedQuantity">
            <summary>
            Pending staked quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePosition.PendingUnstakedQuantity">
            <summary>
            Pending unstaked quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakePosition.RewardEligibleQuantity">
            <summary>
            Reward eligible quantity
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComStakeResult">
            <summary>
            Staking request result
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.StakingId">
            <summary>
            Staking id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.StakeStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.UnderlyingAsset">
            <summary>
            Underlying asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.PreStakeChargeRateInBps">
            <summary>
            Pre stake charge rate in bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.PreStakeCharge">
            <summary>
            Pre stake charge
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakeResult.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequestWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComStakingRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.UnderlyingAssetName">
            <summary>
            Underlying asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.CycleId">
            <summary>
            Cycle id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.StakingId">
            <summary>
            Staking id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.StakeRequestStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.StakeSide">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRequest.CreateTime">
            <summary>
            Create timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingRewardWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComStakingReward">
            <summary>
            Reward info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingReward.StakingSymbol">
            <summary>
            Staking symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingReward.UnderlyingAssetName">
            <summary>
            Underlying asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingReward.RewardName">
            <summary>
            Reward name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingReward.RewardQuantity">
            <summary>
            Reward quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingReward.StakedBalance">
            <summary>
            Staked balance
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingReward.EventTime">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbolWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.UnderlyingAsset">
            <summary>
            Underlying asset name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.RewardName">
            <summary>
            Reward name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.OutOfStock">
            <summary>
            Out of stock
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.BlockUnstake">
            <summary>
            Block unstake
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.EstimatedRewards">
            <summary>
            Estimated rewards
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.AprOrApy">
            <summary>
            Whether the rewards are APR or APY
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.MinStakeQuantity">
            <summary>
            Min stake quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.RewardFrequency">
            <summary>
            Reward frequency in days
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.LockUpPeriod">
            <summary>
            Lock up period in days
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.IsCompoundReward">
            <summary>
            Is compound reward
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.PreStakeChargeEnable">
            <summary>
            Pre stake charge enable
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.PreStakeChargeRateInBps">
            <summary>
            Pre stake charge rate in bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComStakingSymbol.IsRestaked">
            <summary>
            Is restaked
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbolWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComSymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.SymbolType">
            <summary>
            Symbol type
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.PriceDecimals">
            <summary>
            Price decimals
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.QuantityDecimals">
            <summary>
            Quantity decimals
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.PriceTickSize">
            <summary>
            Price step
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.QuantityTickSize">
            <summary>
            Quantity step
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.MaxLeverage">
            <summary>
            Max leverage
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.Tradable">
            <summary>
            Tradable
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.ExpiryTime">
            <summary>
            Expiry timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbol.UnderlyingSymbol">
            <summary>
            Underlying symbol
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComSymbolFeeRate">
            <summary>
            Symbol fee rate
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbolFeeRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbolFeeRate.EffectiveMakerRateBps">
            <summary>
            Effective maker rate bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComSymbolFeeRate.EffectiveTakerRateBps">
            <summary>
            Effective taker rate bps
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComTicker">
            <summary>
            Ticker info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.HighPrice">
            <summary>
            High price in last 24 hours
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.LowPrice">
            <summary>
            Low price in last 24 hours
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.Volume">
            <summary>
            Volume in last 24 hours
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.VolumeUsd">
            <summary>
            Volume in last 24 hours in USD
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.OpenInterest">
            <summary>
            Current open interest
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.PriceChange">
            <summary>
            Price change factor since 24 hours ago, 0.01 = 1%
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.BestBidPrice">
            <summary>
            Current best bid price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.BestBidQuantity">
            <summary>
            Current best bid quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.BestAskPrice">
            <summary>
            Current best ask price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.BestAskQuantity">
            <summary>
            Current best ask quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTicker.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTradeWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComTrade">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTrade.Timestamp">
            <summary>
            Trade timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTrade.Quantity">
            <summary>
            Trade quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTrade.Side">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTrade.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransactionWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.EventDate">
            <summary>
            Event date
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.TransactionType">
            <summary>
            Transaction type
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.JournalId">
            <summary>
            Journal id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.Quantity">
            <summary>
            Transaction quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.Cost">
            <summary>
            Transaction cost
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.TradeMatchId">
            <summary>
            Trade match id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.EventTime">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.TradeRole">
            <summary>
            Trade role
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.OrderSide">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComTransaction.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult">
            <summary>
            Unstake result
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult.StakingId">
            <summary>
            Staking id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult.UnstakeStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult.UnderlyingAsset">
            <summary>
            Underlying asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUnstakeResult.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComUserFee">
            <summary>
            User fee rates
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserFee.SpotTier">
            <summary>
            Spot tier
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserFee.DerivTier">
            <summary>
            Deriv tier
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserFee.EffectiveSpotMakerRateBps">
            <summary>
            Effective spot maker rate bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserFee.EffectiveSpotTakerRateBps">
            <summary>
            Effective spot taker rate bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserFee.EffectiveDerivMakerRateBps">
            <summary>
            Effective deriv maker rate bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserFee.EffectiveDerivTakerRateBps">
            <summary>
            Effective deriv taker rate bps
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTradeWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComUserTrade">
            <summary>
            User trade
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.EventDate">
            <summary>
            Event date
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.TransactionType">
            <summary>
            Journal type
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.Quantity">
            <summary>
            Trade quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.TradeMatchId">
            <summary>
            Trade match id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.Role">
            <summary>
            Trade role
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.OrderSide">
            <summary>
            Trade side
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComUserTrade.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComValuationWrapper.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComValuation">
            <summary>
            Valuation
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComValuation.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComValuation.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalWrapper.WithdrawalList">
            <summary>
            Withdrawal list
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.ClientWithdrawalId">
            <summary>
            Client withdrawal id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.WithdrawalStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawal.NetworkId">
            <summary>
            Network id
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.ClientWithdrawId">
            <summary>
            Client withdrawal id
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Models.CryptoComWithdrawalResult.NetworkId">
            <summary>
            Network id
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Options.CryptoComOptions">
            <summary>
            CryptoCom options
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions">
            <summary>
            Options for the CryptoCom SymbolOrderBook
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Options.CryptoComRestOptions">
            <summary>
            Options for the CryptoComRestClient
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComRestOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Objects.Options.CryptoComRestOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComRestOptions.ExchangeOptions">
            <summary>
            Exchange API options
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Options.CryptoComSocketOptions">
            <summary>
            Options for the CryptoComSocketClient
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComSocketOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Objects.Options.CryptoComSocketOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:CryptoCom.Net.Objects.Options.CryptoComSocketOptions.ExchangeOptions">
            <summary>
            Exchange API options
            </summary>
        </member>
        <member name="T:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComHeartBeatSubscription">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComHeartBeatSubscription.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1">
            <inheritdoc />
        </member>
        <member name="P:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],System.String[],System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{CryptoCom.Net.Objects.Internal.CryptoComSubscriptionEvent{`0}}},System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.Objects.Sockets.Subscriptions.CryptoComSubscription`1.DoHandleMessage(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.SymbolOrderBooks.CryptoComExchangeSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComExchangeSymbolOrderBook.#ctor(System.String,System.Action{CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComExchangeSymbolOrderBook.#ctor(System.String,System.Action{CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,CryptoCom.Net.Interfaces.Clients.ICryptoComRestClient,CryptoCom.Net.Interfaces.Clients.ICryptoComSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComExchangeSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComExchangeSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComExchangeSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:CryptoCom.Net.SymbolOrderBooks.CryptoComOrderBookFactory">
            <summary>
            CryptoCom order book factory
            </summary>
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="P:CryptoCom.Net.SymbolOrderBooks.CryptoComOrderBookFactory.Exchange">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:CryptoCom.Net.SymbolOrderBooks.CryptoComOrderBookFactory.Create(System.String,System.Action{CryptoCom.Net.Objects.Options.CryptoComOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:CryptoExchange.Net.Interfaces.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.CryptoCom(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the CryptoCom REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:CryptoExchange.Net.Interfaces.CryptoClientExtensions.CryptoCom(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the CryptoCom Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCryptoCom(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add services such as the ICryptoComRestClient and ICryptoComSocketClient. Configures the services based on the provided configuration.
            </summary>
            <param name="services">The service collection</param>
            <param name="configuration">The configuration(section) containing the options</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCryptoCom(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CryptoCom.Net.Objects.Options.CryptoComOptions})">
            <summary>
            Add services such as the ICryptoComRestClient and ICryptoComSocketClient. Services will be configured based on the provided options.
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsDelegate">Set options for the CryptoCom services</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCryptoCom(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CryptoCom.Net.Objects.Options.CryptoComRestOptions},System.Action{CryptoCom.Net.Objects.Options.CryptoComSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            DEPRECATED; use <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCryptoCom(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{CryptoCom.Net.Objects.Options.CryptoComOptions})" /> instead
            </summary>
        </member>
    </members>
</doc>
